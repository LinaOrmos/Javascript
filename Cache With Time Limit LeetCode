class TimeLimitedCache{
    cache = new Map();

    function
}

var TimeLimitedCache = function() {
    this.cache = new Map();
};

/** 
 * @param {number} key

 * @param {number} value

 * @param {number} duration time until expiration in ms

 * @return {boolean} if un-expired key already existed
 */
TimeLimitedCache.prototype.set = function(key, value, duration) {
    const alreadyExists = this.cache.get(key);
    if (alreadyExists){
        clearTimeout(alreadyExists.timeoutId);

    }
    const timeoutId = setTimeout(()=>{
        this.cache.delete(key);
    },duration);
    this.cache.set(key,{value, timeoutId});
    return Boolean(alreadyExists)
};

/** 
 * @param {number} key

 * @return {number} value associated with key

 */
TimeLimitedCache.prototype.get = function(key) {
   if (this.cache.has(key))
      return this.cache.get(key).value;
    return -1;   
};

/** 
 * @return {number} count of non-expired keys
 */
TimeLimitedCache.prototype.count = function() {
    
};

/**
 * const timeLimitedCache = new TimeLimitedCache()
 * timeLimitedCache.set(1, 42, 1000); // false
 * timeLimitedCache.get(1) // 42
 * timeLimitedCache.count() // 1
 */
